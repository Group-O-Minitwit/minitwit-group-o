---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to the main branch
    branches:
      - main
      - master
  # allow manual triggers for now too
  workflow_dispatch:
    manual: true

# Remember to set the following secrets in your repository's settings:
# https://github.com/Group-O-Minitwit/minitwit-group-o/settings/secrets/actions
# DOCKER_USERNAME
# DOCKER_PASSWORD
# SSH_USER
# SSH_KEY
# SSH_HOST

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push minitwit-backend
        uses: docker/build-push-action@v2
        with:
          context: ./minitwit-backend
          file: ./minitwit-backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwit-backend:runtime
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-backend:webbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-backend:webbuildcache,mode=max

      #- name: Build and push database
      #  uses: docker/build-push-action@v2
      #  with:
      #    context: .
      #    file: minitwit-database/Dockerfile
      #    push: true
      #    tags: ${{ secrets.DOCKER_USERNAME }}/postgres:14.1-alpine:latest
      #    cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/postgres:14.1-alpine:mysqlbuildcache
      #    cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/postgres:14.1-alpine:mysqlbuildcache,mode=max

     # - name: Build and push frontend
     #   uses: docker/build-push-action@v2
     #   with:
     #     context: .
     #     file: minitwit-frontend/Dockerfile
     #     push: true
     #     tags: ${{ secrets.DOCKER_USERNAME }}/flagtoolimage:latest
     #     cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/flagtoolimage:flagtoolbuildcache
     #     cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/flagtoolimage:flagtoolbuildcache,mode=max

     # - name: Test api
     #   run: |
     #     docker build -t $DOCKER_USERNAME/minitwittestimage -f Dockerfile-api-tests .
     #     yes 2>/dev/null | docker-compose up -d
     #     docker run --rm --network=itu-minitwit-network $DOCKER_USERNAME/minitwittestimage
     #   env:
     #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/minitwit.key
          chmod 600 ~/.ssh/minitwit.key
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        # Configure the ~./bash_profile and deploy.sh file on the Vagrantfile
        run: >
          scp -pr ./remote_files $SSH_USER@$SSH_HOST:~/minitwit
          ssh $SSH_USER@$SSH_HOST
          -i ~/.ssh/minitwit.key -o StrictHostKeyChecking=no
          '/minitwit/deploy.sh'
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}